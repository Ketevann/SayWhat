'use strict';

exports.__esModule = true;
exports.setCacheId = exports.removeIdFromCache = exports.createIdForTag = exports.stylesExist = exports.getActiveValuesFromCache = exports.createGetCacheValuesFromKeys = undefined;

var _compose = require('lodash/fp/compose');

var _compose2 = _interopRequireDefault(_compose);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

var _keys = require('lodash/keys');

var _keys2 = _interopRequireDefault(_keys);

var _reduce = require('lodash/fp/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cache = {};

/**
 * @function createGetCacheValuesFromKeys
 *
 * @description
 * prebuilt reduce function which only requires the keys to operate
 *
 * @param {Object} [localCache=cache] the cache to retrieve values from
 * @returns {function(Array<string>): Array<string>} the reduce function to get the values based on keys
 */
// external dependencies
var createGetCacheValuesFromKeys = exports.createGetCacheValuesFromKeys = function createGetCacheValuesFromKeys() {
  var localCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cache;

  return (0, _reduce2.default)(function (values, key) {
    return !localCache[key] ? values : values.concat([localCache[key]]);
  }, []);
};

/**
 * @function getActiveValuesFromCache
 *
 * @description
 * get the ids that have active values in cache
 *
 * @param {Object} localCache the cache to get the active values from
 * @returns {Array<string>} the values in cache
 */
var getActiveValuesFromCache = exports.getActiveValuesFromCache = function getActiveValuesFromCache(localCache) {
  return (0, _compose2.default)(createGetCacheValuesFromKeys(localCache), _keys2.default)(localCache);
};

/**
 * @function stylesExist
 *
 * @description
 * determine if the style passed already exists
 *
 * @param {Object} localCache the current cache of styles
 * @param {string} id the id of the style in question
 * @param {string} value the value to test for
 * @returns {boolean} does the style already exist
 */
var stylesExist = exports.stylesExist = function stylesExist(localCache, id, value) {
  return !!(document.getElementById(id) || ~getActiveValuesFromCache(localCache).indexOf(value));
};

/**
 * @function createIdForTag
 *
 * @description
 * create a unique ID for the style tag
 *
 * @param {string} id the id of the style in question
 * @param {string} value the value to assign in cache
 * @param {Object} [localCache=cache] the cache to create an id for
 * @returns {null|string} the id of the item in cache
 */
var createIdForTag = exports.createIdForTag = function createIdForTag(id, value) {
  var localCache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : cache;

  var finalId = (0, _isUndefined2.default)(id) ? (0, _v2.default)() : id;

  if (stylesExist(localCache, finalId, value)) {
    return null;
  }

  localCache[finalId] = value;

  return finalId;
};

/**
 * @function removeIdFromCache
 *
 * @description
 * remove the ID from cache
 *
 * @param {string} id id to remove from cache
 * @param {Object} [localCache=cache] cache to remove id from
 */
var removeIdFromCache = exports.removeIdFromCache = function removeIdFromCache(id) {
  var localCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cache;

  delete localCache[id];
};

/**
 * @function setCacheId
 *
 * @description
 * update the cached value
 *
 * @param {string} id id to set in cache
 * @param {string} value value to assign to id in cache
 * @param {Object} [localCache=cache] cache to remove id from
 */
var setCacheId = exports.setCacheId = function setCacheId(id, value) {
  var localCache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : cache;

  localCache[id] = value;
};