'use strict';

exports.__esModule = true;
exports.getTransformedCss = exports.prefixAndMinifyCss = exports.prefixCss = exports.minify = exports.getCoalescedPropsValue = undefined;

var _compose = require('lodash/fp/compose');

var _compose2 = _interopRequireDefault(_compose);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @function getCoalescedPropsValue
 *
 * @description
 * return the propsValue if it exists, else return the defaultValue
 *
 * @param {boolean} propsValue
 * @param {boolean} defaultValue
 * @returns {boolean}
 */
var getCoalescedPropsValue = exports.getCoalescedPropsValue = function getCoalescedPropsValue(propsValue, defaultValue) {
  return (0, _isUndefined2.default)(propsValue) ? defaultValue : propsValue;
};

/**
 * @function minify
 *
 * @description
 * return the minified string css
 *
 * @param {string} cssText
 * @returns {string}
 */


// constants
// external dependencies
var minify = exports.minify = function minify(cssText) {
  return cssText.trim().replace(/\/\*[\s\S]+?\*\//g, '').replace(/[\n\r]/g, '').replace(/\s*([:;,{}])\s*/g, '$1').replace(/\s+/g, ' ').replace(/;}/g, '}').replace(/\s+(!important)/g, '$1').replace(/#([a-fA-F0-9])\1([a-fA-F0-9])\2([a-fA-F0-9])\3(?![a-fA-F0-9])/g, '#$1$2$3').replace(/(Microsoft[^;}]*)#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])(?![a-fA-F0-9])/g, '$1#$2$2$3$3$4$4').replace(/\b(\d+[a-z]{2}) \1 \1 \1/gi, '$1').replace(/\b(\d+[a-z]{2}) (\d+[a-z]{2}) \1 \2/gi, '$1 $2').replace(/([\s|:])[0]+px/g, '$10');
};

/**
 * @function prefixCss
 *
 * @description
 * return the css after running through autoprefixer
 *
 * @param {string} cssText
 * @returns {string}
 */
var prefixCss = exports.prefixCss = function prefixCss(cssText) {
  return _constants.PREFIXER.process(cssText).css;
};

/**
 * @function prefixAndMinifyCss
 *
 * @description
 * return the css after running through autoprefixer and minify
 *
 * @param {string} cssText
 * @returns {string}
 */
var prefixAndMinifyCss = exports.prefixAndMinifyCss = (0, _compose2.default)(minify, prefixCss);

/**
 * @function getTransformedCss
 *
 * @description
 * get the (if applicable) prefixed and minified css based on the
 * original cssText
 *
 * @param {string} cssText
 * @param {boolean} doNotPrefix=false
 * @param {boolean} isMinified=false
 * @returns {string}
 */
var getTransformedCss = exports.getTransformedCss = function getTransformedCss(cssText) {
  var doNotPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var isMinified = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!isMinified) {
    return doNotPrefix ? cssText : prefixCss(cssText);
  }

  var transformCss = doNotPrefix ? minify : prefixAndMinifyCss;

  return transformCss(cssText);
};