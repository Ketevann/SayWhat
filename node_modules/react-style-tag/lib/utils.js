'use strict';

exports.__esModule = true;
exports.throwErrorIfIsNotText = exports.getHasBlobSupport = exports.getUrl = undefined;

var _isString = require('lodash/fp/isString');

var _isString2 = _interopRequireDefault(_isString);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @function getUrl
 *
 * @description
 * get the URL object that is used to createObjectURL
 *
 * @returns {Object} either the window's URL object, or an empty object
 */
// external dependencies
var getUrl = exports.getUrl = function getUrl() {
  return typeof window === 'undefined' ? {} : window.URL || window.webkitURL;
};

/**
 * @function getHasBlobSupport
 *
 * @description
 * get whether or not the browser supports blob object
 *
 * @returns {boolean} does the browser support blob
 */


// constants
var getHasBlobSupport = exports.getHasBlobSupport = function getHasBlobSupport() {
  if (typeof window === 'undefined') {
    return false;
  }

  var win = window;

  if (!(win.Blob && typeof win.Blob === 'function' && getUrl().createObjectURL)) {
    return false;
  }

  try {
    new win.Blob();

    return true;
  } catch (exception) {
    return false;
  }
};

/**
 * @function throwErrorIfIsNotText
 *
 * @description
 * throw an error if the provided children is not a text node
 *
 * @param {*} children
 */
var throwErrorIfIsNotText = exports.throwErrorIfIsNotText = function throwErrorIfIsNotText(children) {
  if (!(0, _isString2.default)(children)) {
    throw new TypeError(_constants.ONLY_TEXT_ERROR);
  }
};